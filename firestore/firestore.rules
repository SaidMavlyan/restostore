rules_version = '2';
service cloud.firestore {
  function isAdmin() {
    return isAuthenticated() && request.auth.token.role == 'admin';
  }

  function isOwner() {
    return isAuthenticated() && request.auth.token.role == 'owner';
  }

  function isAuthenticated() {
    return request.auth.uid != null;
  }

  function createBySelf() {
    return request.auth.uid == request.resource.data.ownerId && isOwner();
  }

  function updateBySelf() {
    return request.auth.uid == resource.data.ownerId && isOwner();
  }

  function deleteBySelf() {
    return request.auth.uid == resource.data.ownerId && isOwner();
  }

  function validRestoFields() {
    return !("avgRating" in request.writeFields)
            && !("numRatings" in request.writeFields)
            && !("pendingReplies" in request.writeFields);
  }

  function validInitRestoFields() {
    return (request.resource.data.avgRating == 0)
            && (request.resource.data.numRatings == 0)
            && (request.resource.data.pendingReplies == 0);
  }

  match /databases/{database}/documents {

    match /users/{uid} {
      allow read, write: if request.auth.uid == uid || isAdmin();
    }

    match /restaurants/{restaurant} {
      match /reviews/{review} {
        allow read, write: if false;
      }

      allow read;
      allow create: if (createBySelf() || isAdmin()) && validInitRestoFields();
      allow update: if (updateBySelf() || isAdmin()) && validRestoFields();
      allow delete: if deleteBySelf() || isAdmin();
    }
  }
}
